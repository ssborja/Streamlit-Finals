# -- coding: utf-8 --
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14k1-65syE6s0aUNj44IVGOXEoK553c8z
"""

import streamlit as st
import tensorflow as tf
from PIL import Image, ImageOps
import numpy as np

# Load the model with caching
@st.cache(allow_output_mutation=True)
def load_model():
    model = tf.keras.models.load_model('SSB.hdf5')  # Updated to your CIFAR-100 model
    return model

model = load_model()

# Set up the page layout
st.write("""
# CIFAR-100 Image Classifier
Upload an image and the model will predict which category it belongs to.
""")

# File uploader widget
file = st.file_uploader("Choose an image...", type=["jpg", "png"])

# Function to preprocess and predict the image
def import_and_predict(image_data, model):
    # Resize and rescale the image
    size = (32, 32)  # CIFAR-100 uses 32x32 images
    image = ImageOps.fit(image_data, size, Image.ANTIALIAS)
    img = np.asarray(image)
    img_rescaled = img / 255.0  # Rescale as in training
    img_reshape = img_rescaled[np.newaxis, ...]  # Add batch dimension
    prediction = model.predict(img_reshape)
    return prediction

# Display the uploaded image and run prediction
if file is None:
    st.text("Please upload an image file.")
else:
    image = Image.open(file)
    st.image(image, use_column_width=True)
    prediction = import_and_predict(image, model)
    # Define CIFAR-100 label names based on your trained model's label assignment
    class_names = ['apple', 'aquarium_fish', 'baby', 'bear', 'beaver', ..., 'wolf', 'woman', 'worm']  # Add all 100 labels
    predicted_class = np.argmax(prediction, axis=1)
    result = "This image most likely belongs to a {}.".format(class_names[predicted_class[0]])
    st.success(result)
